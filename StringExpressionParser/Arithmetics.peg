@using System.Linq.Expressions;
@using System.Globalization;

@namespace StringExpressionParser
@classname Arithmetics

@members 
{
    public KeyedDictionary<string, ParameterExpression> Parameters = new(p=>p.Name);
}

    add <Expression> -memoize
        = left:mul ws "+" ws right:add { Expression.Add(left, right) }
        / left:mul ws "-" ws right:add { Expression.Subtract(left, right) }
        / mul

    mul <Expression> -memoize
        = left:power ws "*" ws right:mul { Expression.Multiply(left, right) }
        / left:power ws "/" ws right:mul { Expression.Divide(left, right) }
        / power

    power <Expression>
        = left:primary ws "^" ws right:power { Expression.Call(typeof(Math).GetMethod(nameof(Math.Pow)), left, right) }
        / primary

    primary <Expression> -memoize
        = decimal
        / "-" primary:primary { Expression.Negate(primary) }
        / "(" ws additive:add ws ")" { additive }
        / parameter

    decimal <Expression>
        = value:([0-9]+ ("." [0-9]+)?) { Expression.Constant(double.Parse(value, CultureInfo.InvariantCulture)) }
    parameter <Expression> 
        = param:paramName { Parameters[param] }
    
    paramName <string> = "x" / "y" / "z"

    ws = [ \t\r\n]*